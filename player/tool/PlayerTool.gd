class_name Player_Tool extends Node3D

@export var MODEL:Node3D;

##Optionally set.
##@export var CAM_FOCUS_POS:Node3D;




@export_group("Model Position Nodes", "MODEL_POSITION_")
@export var MODEL_POSITION_DEFAULT:Node3D;
#~Where the camera would be
@export var MODEL_POSITION_INSPECT:Node3D;
##Where the camera would be. SHould be a direct child
@export var MODEL_POSITION_FOCUS:Node3D;

##For rotations
var current_model_position_inspect:Node3D = Node3D.new();

@onready var MY_ANCHOR:PhysicsBody3D = $My_Anchor;
@onready var ANCHOR_SPRING:Generic6DOFJoint3D = $My_Anchor/Generic6DOFJoint3D
@onready var RIGIDBODY:RigidBody3D = $RigidBody3D

var ANCHOR:Node3D:
	set(v):
		#print(v.get_path())
		ANCHOR = v
		#MY_ANCHOR.reparent(ANCHOR);
		#MY_ANCHOR.reparent(ANCHOR.get_parent())
		#print(ANCHOR)
		ANCHOR_SPRING.node_a = ANCHOR_SPRING.get_path_to(MY_ANCHOR)
		ANCHOR_SPRING.node_b = ANCHOR_SPRING.get_path_to(RIGIDBODY)



#Settable flags for manipulation

var interact_0:bool = false:
	set(v):
		if(interact_0 == v): return; # no change
		
		if(!inspect):
			interact_0 = v
			interact_0_set(v)

var focus:bool = false:
	set(v):
		if(focus == v): return; # no change
		
		if(!inspect):
			focus = v
			focus_set(v)

var inspect:bool = false:
	set(v):
		if(inspect == v): return # no change
		
		inspect = v
		inspect_set(v)
		if(inspect): # if set, disable interacts
			current_model_position_inspect.transform = MODEL_POSITION_INSPECT.transform
			
			if(interact_0): interact_0 = false
		else:
			if(focus): focus = false






func _ready() -> void:
	if(MODEL_POSITION_INSPECT == null): # autocreate if not existent
		MODEL_POSITION_INSPECT = Node3D.new();
		add_child(MODEL_POSITION_INSPECT);
		MODEL_POSITION_INSPECT.position = Vector3(0,0,0.2);
		MODEL_POSITION_INSPECT.rotate_y(PI/4);
		push_warning("Inspect position node not set. Autogenerated.")
		
	if(MODEL_POSITION_DEFAULT == null): # autocreate if not existent
		MODEL_POSITION_DEFAULT = Node3D.new();
		add_child(MODEL_POSITION_DEFAULT);
		MODEL_POSITION_DEFAULT.position = Vector3(0,0,0);
		push_warning("Inspect position node not set. Autogenerated.")
		
	if(MODEL_POSITION_FOCUS == null):
		MODEL_POSITION_FOCUS = Node3D.new()
		add_child(MODEL_POSITION_FOCUS)
		MODEL_POSITION_FOCUS.position = Vector3(0, 0, 0.5);
		push_warning("Focus position node not set. Autogenerated.")
	
	MODEL_POSITION_DEFAULT.reparent(self)
	MODEL_POSITION_FOCUS.reparent(self)
	MODEL_POSITION_INSPECT.reparent(self)
	current_model_position_inspect.global_transform = MODEL_POSITION_INSPECT.global_transform
	add_child(current_model_position_inspect)


func _process(delta: float) -> void:
	pass


func _physics_process(delta: float) -> void:
	if(ANCHOR != null):
		#print(ANCHOR.get_path())
		MY_ANCHOR.global_transform = ANCHOR.global_transform
		#print(MY_ANCHOR.global_position)
		
		var current_rot := Quaternion(MY_ANCHOR.transform.basis)
	
		var hold_rot := Quaternion(MODEL_POSITION_DEFAULT.transform.basis)
		var inspect_rot := Quaternion(current_model_position_inspect.transform.basis.inverse());
		var focus_rot := Quaternion(MODEL_POSITION_FOCUS.transform.basis.inverse());
		
		
		# All this basis work : Translates MODEL_POSITION's Basis & position into its inverse(So it can pretend the camera/node is there)(Just normal for default [not inspecting or focussing])
		#And appliead as if it were a child to ANCHOR. Which MY_ANCHOR is not, else things go wrong prommy
		
		if(inspect):    
			MY_ANCHOR.basis *= Basis(inspect_rot)
			MY_ANCHOR.global_position += ANCHOR.global_basis * MODEL_POSITION_INSPECT.basis.inverse() *  -current_model_position_inspect.position
		elif(focus):
			MY_ANCHOR.basis *= Basis(focus_rot)
			MY_ANCHOR.global_position += ANCHOR.global_basis * MODEL_POSITION_FOCUS.basis.inverse() * -MODEL_POSITION_FOCUS.position
		else:
			MY_ANCHOR.basis *= Basis(hold_rot)
			MY_ANCHOR.global_position += ANCHOR.global_basis * MODEL_POSITION_DEFAULT.basis.inverse() * MODEL_POSITION_DEFAULT.position


##Internal function. Externally, please directly set inspect.
func inspect_set(value:bool):
	pass

func interact_0_set(value:bool):
	pass

func focus_set(value:bool):
	pass




func rotate_inspect_node(rot: Vector2):
	current_model_position_inspect.rotate_object_local(Vector3.UP, -rot.x)
	current_model_position_inspect.rotate_object_local(Vector3.RIGHT, -rot.y)
	
	#MODEL.basis = Quaternion(MODEL.transform.basis).slerp(Quaternion(current_model_position_inspect.transform.basis), 0.1); # increases responsiveness
