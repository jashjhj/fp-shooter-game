class_name Gun extends Node3D

signal trigger;

@export var trigger_functions:Array[Gun_Part_Listener];

##Set to the default bullet scene
#var bullet:PackedScene = load("res://gameobjects/bullets/bullet.tscn");

@export var GUN_MODEL:Node3D;
@export var INSPECT_POSITION:Node3D;
@export var HOLD_POSITION:Node3D;

var is_inspecting := false;

@onready var default_inspect_transform:Transform3D = INSPECT_POSITION.transform

func _ready() -> void:
	trigger.connect(_trigger);
	
	if(INSPECT_POSITION == null): # autocreate if not existent
		INSPECT_POSITION = Node3D.new();
		add_child(INSPECT_POSITION);
		INSPECT_POSITION.position = Vector3(0,0,0.2);
		INSPECT_POSITION.rotate_y(PI/4);
		push_warning("Inspect position node not set. Autogenerated.")
	if(HOLD_POSITION == null): # autocreate if not existent
		HOLD_POSITION = Node3D.new();
		add_child(HOLD_POSITION);
		HOLD_POSITION.position = Vector3(0,0,0);
		push_warning("Inspect position node not set. Autogenerated.")
	
	
	for child in get_all_children(self):
		if child is Gun_Part:
			child.PARENT_GUN = self;




func _process(_delta:float):
	var current_rot := Quaternion(GUN_MODEL.transform.basis)
	var hold_rot := Quaternion(HOLD_POSITION.transform.basis)
	var inspect_rot := Quaternion(INSPECT_POSITION.transform.basis);
	
	var lerp_rate := 0.1;
	
	if(is_inspecting):
		GUN_MODEL.basis = current_rot.slerp(inspect_rot, lerp_rate);
		GUN_MODEL.position = GUN_MODEL.position.lerp(INSPECT_POSITION.position, lerp_rate)
	else:
		GUN_MODEL.basis = current_rot.slerp(hold_rot, lerp_rate);
		GUN_MODEL.position = GUN_MODEL.position.lerp(HOLD_POSITION.position, lerp_rate)



func rotate_inspect_node(rot: Vector2):
	INSPECT_POSITION.rotate_y(rot.x)
	INSPECT_POSITION.rotate_x(rot.y)
	
	GUN_MODEL.basis = Quaternion(GUN_MODEL.transform.basis).slerp(Quaternion(INSPECT_POSITION.transform.basis), 0.1); # increases responsiveness


func _trigger():
	for listener in trigger_functions:
		listener.trigger.emit();


func start_inspect():
	is_inspecting = true;
	for child in get_all_children(self):
		if child is Gun_Part_Interactive:
			child.is_interactive = true;
	
	INSPECT_POSITION.transform = default_inspect_transform;

func end_inspect():
	is_inspecting = false;
	for child in get_all_children(self):
		if child is Gun_Part_Interactive:
			child.is_interactive = false;


##Recursive get_children
func get_all_children(node) -> Array:
	var nodes : Array = []
	for N in node.get_children():
		if N.get_child_count() > 0:
			nodes.append(N)
			nodes.append_array(get_all_children(N))
		else:
			nodes.append(N)
	return nodes
